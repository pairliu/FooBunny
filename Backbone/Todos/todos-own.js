// Load the application once the DOM is ready, using `jQuery.ready`:
$(function() {
	var Todo = Backbone.Model.extend({
		defaults: function() {
			return {
				title: 'empty todo...',           //properties don't need to use quotes
				done: false,
				order: Todos.nextOrder()
			};
		},
		
		toggle: function() {
			// This line contains a lot of details. 
			// Model object's attribute can only be retrieval by get().
			// save() can use a object and only save the specified attribute
			this.save({done: !this.get("done")});                  //property doesn't need to quote. But in get(), should be quoted. 
		}
	});
	
	var TodoList = Backbone.Collection.extend({
		model: Todo,
		
		localStorage: new Backbone.LocalStorage("todos-backbone"),
		
		//Two filter functions. Using the Collection.where() to filter
		done: function() {
			// Also accept an object
			return this.where({done: true});
		},
		
		remaining: function() {
			return this.where({done: false});
		},
		
		nextOrder: function() {
			if (!this.length) return 1;
			return this.last().get('order') + 1;
		},
		
		comparator: 'order'
	});
	
	// new operator can omit ()
	var Todos = new TodoList;
	
	var TodoView = Backbone.View.extend({
		// Every view is an todo item. The element specified in tagName will be created.
		tagName: "li",
		
		template: _.template($('#item-template').html()),
		
		events: {
			"click .toggle"   : "toggleDone",
            "dblclick .view"  : "edit",
            "click a.destroy" : "clear",
            "keypress .edit"  : "updateOnEnter",
            "blur .edit"      : "close"
		},
		
		initialize: function() {
			this.listenTo(this.model, 'change', this.render);                 //Refer to "this.model", but there is no declaration for it! 
			this.listenTo(this.model, 'destroy', this.remove);                //this.remove() is a built-in functionality
		},
		
		toggleDone: function() {
			//if (this.model.done) this.view.addClass();
			//else this.view.removeClass();                                   //Rely on render() for DOM display (except addOne() this kind of thing). Leverage data and event.
			this.model.toggle();
		},
		
		edit: function() {
			// No need to pass in an event then get the element from the event. Just use "this"
			this.$el.addClass("editing");
			this.input.focus();
			
		},
		
		clear: function() {
			this.model.destroy();
		}, 
		
		updateOnEnter: function(e) {
			if (!e.keyCode == 13) return;
			if (!this.input.val() == '') return;
			
			this.model.save({title: this.input.val()});
		},
		
		close: function() {
			var value = this.input.val();
			if (!value) {
				this.clear();
			} else {
				this.model.save({title: value});
				this.$el.removeClass("editing");
			}
		},
		
		render: function() {
			this.$el.html(this.template(this.model.toJSON()));
            this.$el.toggleClass('done', this.model.get('done'));
            this.input = this.$('.edit');
            return this;
		}
	});
	
	var AppView = Backbone.View.extend({
		el: $("#todoapp"),
		
		statsTemplate: _.template($('#stats-template').html()),
		
		events: {                                                   // The events generated by elements inside the view.
            "keypress #new-todo":  "createOnEnter",
            "click #clear-completed": "clearCompleted",
            "click #toggle-all": "toggleAllComplete"
        },
		
		initialize: function() {
			// Assign the elements to some local properties
			this.input = this.$("#new-todo");
            this.allCheckbox = this.$("#toggle-all")[0];

            this.listenTo(Todos, 'add', this.addOne);                // Listen to model/collection's events.
            this.listenTo(Todos, 'reset', this.addAll);
            this.listenTo(Todos, 'all', this.render);                // All events will call render. So when "add", both addOne() and render() will be called?

            this.footer = this.$('footer');
            this.main = $('#main');

			// Fetch the preexist todos in local storage
            Todos.fetch();
		},
		
		render: function() {
			console.log("render() is called");
			var done = Todos.done().length;
			var remaining = Todos.remaining().length;
			
			if (Todos.length) {
				this.main.show();
				this.footer.show();
				this.footer.html();
			} else {
				this.main.hide();
				this.footer.hide();
			}
			
			this.allCheckbox.checked = !remaining;
		},
		
		addOne: function(todo) {
			console.log("addOne() is called");
			var view = new TodoView({model: todo});           //Very weird. 'model' isn't declared in TodoView. But also 'model' is refered a lot of times inside TodoView.
			this.$("#todo-list").append(view.render().el);
		},
		
		addAll: function() {
			Todos.each(this.addOne, this);
		},
		
		createOnEnter: function(e) {
			if (e.keyCode != 13) return;
			if (!this.input.val()) return;
			
			Todos.create({title: this.input.val()});     // Todos.create() --> event "add" is triggered --> addOne() is called, and a new TodoView is created. --> render() is called.
			this.input.val('');
		},
		
		clearCompleted: function() {
			_.invoke(Todos.done(), 'destroy');           //Where does Todos.done() come from?
            return false;
		},
		
		toggleAllComplete: function() {
			var done = this.allCheckbox.checked;
			
			Todos.each(function (todo) { todo.save({'done': done}); });
		}
	});
	
	var App = new AppView;
});















